#!/usr/bin/env ruby
#
# Findhost
#
# Usage: #{$0}

require 'rubygems'
require 'net/ssh'
require 'highline/import'

@cachefile = File.join("#{ENV['HOME']}",".findhosts")
@shellfile = File.join("#{ENV['HOME']}",".ssh","known_hosts")

def die(message)
  STDERR.puts message
  exit(1)
end

user = HighLine.new
username = user.ask("Username: ") { |q| q.default = ENV['USER'] }
password = user.ask("Password: ") { |q| q.echo = false }

hosts = []
if File.exists?(@cachefile)
	hosts = IO.readlines(@cachefile).map { |x| x.strip }
elsif File.exists?(@shellfile)
	IO.foreach(@shellfile) do |line|
  	hostname = line.split(/[\, ]/).shift
  	hosts.push hostname
	end
else
	die "No candidate known_hosts file found"
end

threads = []
response = {}
STDERR.print "Pinging #{hosts.size} hosts..."
hosts.each do |hostname|
  threads << Thread.new(hostname) do |host|
    response[host] = `ping -W 1 -c 5 #{host} 2> /dev/null`
  end
end
threads.each { |x| x.join }
STDERR.puts "OK"

invalid = []
response.each_pair do |host,resp|
  valid = false
  resp.split("\n").each do |line|
    if line =~ /avg.*(\d+\.\d+)\/(\d+\.\d+)\/(\d+\.\d+)\/(\d+\.\d+)/
      response[host] = $2.to_f
      valid = true
    end
  end
  invalid.push host if not valid
end

response.reject! { |k,v| invalid.include?(k) }

STDERR.print "Authenticating #{response.size} hosts..."
response.map do |host, ping|
  begin
    Net::SSH.start(host, username, :password => password) do |ssh|
      
    end
  rescue
    # SSH failed
    response[host] = false
  end
end
response.reject! { |k,v| v == false }
STDERR.puts "OK"

STDERR.puts "\n"
puts response.map { |k,v| [k,v] }.sort { |a,b| a[1] <=> b[1] }.map { |x| x.join("\t") }.join("\n")

# Save found hosts in ~/.findhosts
prev_hosts = []
if File.exists?(@cachefile)
  prev_hosts = IO.readlines(@cachefile).map { |x| x.strip }
end
prev_hosts = [response.keys,prev_hosts].flatten.uniq
fout = File.open(@cachefile,'w')
fout.puts prev_hosts.join("\n")
fout.close